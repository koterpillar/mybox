name: CI
on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install dependencies
        run: ./bin/install-dev --no-python
      - name: Lint
        run: ./bin/lint --no-python
  lint-python:
    name: "Lint Python${{ format(' ({0})', matrix.python) || '' }}"
    strategy:
      fail-fast: false
      matrix:
        python:
          - "3.11"
          - "3.13"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: ./bin/install-dev --no-haskell
      - name: Lint
        run: ./bin/lint --no-haskell
  test:
    name: "Test${{ matrix.part && matrix.part != 'Haskell' && format(' {0}', matrix.part) || ''}} (${{ matrix.docker && format('{0} Docker', matrix.docker) || format('{0} host', matrix.host) }}${{ matrix.arch && format(' {0}', matrix.arch) || ''}})"
    strategy:
      fail-fast: false
      matrix:
        include:
          - docker: debian
            part: Haskell
          - docker: debian
            part: Python
          - docker: ubuntu
            part: Haskell
          - docker: ubuntu
            part: Python
          - docker: ubuntu
            arch: arm
            part: Haskell
          - docker: ubuntu
            arch: arm
            part: Python
          - docker: fedora
            part: Haskell
          - docker: fedora
            part: Python
          - host: ubuntu
            part: Haskell
          - host: ubuntu
            part: Python
          - host: macos
            part: Haskell
          - host: macos
            part: Python
    runs-on: ${{ matrix.host && format('{0}-latest', matrix.host) || matrix.arch && format('ubuntu-24.04-{0}', matrix.arch) || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        if: ${{ matrix.part == 'Python' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./bin/install-dev --no-lint${{ matrix.part == 'Python' && ' --no-haskell' || '' }}${{ matrix.part == 'Haskell' && ' --no-python' || '' }}
      - name: Configure host system
        if: matrix.host && matrix.host != 'macos'
        run: |
          sudo tee /etc/polkit-1/rules.d/org.freedesktop.Flatpak.rules >/dev/null <<EOF
            polkit.addRule(function(action, subject) {
              if (
                action.id == "org.freedesktop.Flatpak.app-install" ||
                action.id == "org.freedesktop.Flatpak.modify-repo"
              ) {
                return polkit.Result.YES;
              }
              return polkit.Result.NOT_HANDLED;
            });
          EOF
          command -v apt >/dev/null && sudo apt update || true
      - name: Test
        if: ${{ matrix.part == 'Haskell' }}
        uses: freckle/stack-action@v5
        with:
          stack-build-arguments: --fast --lock-file error-on-write --coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_IMAGE: ${{ matrix.docker }}
      - name: Test (Python)
        if: ${{ matrix.part == 'Python' }}
        run: |
          ./bin/test
          ./bin/coverage-report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_IMAGE: ${{ matrix.docker }}
      - name: Prepare coverage
        if: ${{ matrix.part == 'Haskell' }}
        uses: 8c6794b6/hpc-codecov-action@v4
        with:
          target: stack:all
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs:
      - lint
      - lint-python
      - test
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        include:
          - os: ubuntu
          - os: ubuntu
            arch: arm
          - os: macos
    runs-on: ${{ matrix.arch && format('ubuntu-24.04-{0}', matrix.arch) || format('{0}-latest', matrix.os) }}
    name: "Build (${{ matrix.os }}${{ matrix.arch && format(' {0}', matrix.arch) || '' }})"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-python
      - id: compile
        name: Compile
        uses: freckle/stack-action@v5
        with:
          test: false
      - name: Move executable
        run: cp ${{ steps.compile.outputs.local-install-root }}/bin/mybox ./mybox-$(uname)-$(uname -m)
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}-${{ matrix.arch || 'default' }}
          path: mybox-*

  publish:
    needs:
      - build
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.18.0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-haskell
      - name: Download executables
        uses: actions/download-artifact@v5
        with:
          pattern: 'executable-*'
          merge-multiple: true
          path: ./executables
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          npx \
            --package semantic-release-pypi@3 \
            --package semantic-release@18 \
            semantic-release
