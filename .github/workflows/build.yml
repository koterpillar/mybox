name: CI
on:
  push:
    branches:
      - 'main'
  pull_request:

jobs:
  lint:
    name: "Lint ${{ matrix.part != 'Haskell' && format('{0}', matrix.part) || '' }}${{ matrix.part == 'Python' && format(' ({0})', matrix.python) || '' }}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - part: Haskell
          - part: Python
            python: "3.11"
          - part: Python
            python: "3.13"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        if: ${{ matrix.part == 'Python' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: ./install-dev${{ matrix.part == 'Python' && ' --no-haskell' || '' }}${{ matrix.part == 'Haskell' && ' --no-python' || '' }}
      - name: Lint
        run: ./lint${{ matrix.part == 'Python' && ' --no-haskell' || '' }}${{ matrix.part == 'Haskell' && ' --no-python' || '' }}
  test:
    name: "Test${{ matrix.part && matrix.part != 'Haskell' && format(' {0}', matrix.part) || ''}} (${{ matrix.docker && format('{0} Docker', matrix.docker) || format('{0} host', matrix.host) }}${{ matrix.arch && format(' {0}', matrix.arch) || ''}})"
    strategy:
      fail-fast: false
      matrix:
        include:
          - docker: debian
            part: Haskell
          - docker: debian
            part: Python
          - docker: ubuntu
            part: Haskell
          - docker: ubuntu
            part: Python
          - docker: ubuntu
            arch: arm
            part: Haskell
          - docker: ubuntu
            arch: arm
            part: Python
          - docker: fedora
            part: Haskell
          - docker: fedora
            part: Python
          - host: ubuntu
            part: Haskell
          - host: ubuntu
            part: Python
          - host: macos
            part: Haskell
          - host: macos
            part: Python
    runs-on: ${{ matrix.host && format('{0}-latest', matrix.host) || matrix.arch && format('ubuntu-24.04-{0}', matrix.arch) || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        if: ${{ matrix.part == 'Python' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./install-dev --no-lint${{ matrix.part == 'Python' && ' --no-haskell' || '' }}${{ matrix.part == 'Haskell' && ' --no-python' || '' }}
      - name: Configure host system
        if: matrix.host && matrix.host != 'macos'
        run: |
          sudo tee /etc/polkit-1/rules.d/org.freedesktop.Flatpak.rules >/dev/null <<EOF
            polkit.addRule(function(action, subject) {
              if (
                action.id == "org.freedesktop.Flatpak.app-install" ||
                action.id == "org.freedesktop.Flatpak.modify-repo"
              ) {
                return polkit.Result.YES;
              }
              return polkit.Result.NOT_HANDLED;
            });
          EOF
          command -v apt >/dev/null && sudo apt update || true
      - name: Test
        if: ${{ matrix.part == 'Haskell' }}
        uses: freckle/stack-action@v5
        with:
          stack-build-arguments: --fast --lock-file error-on-write
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_IMAGE: ${{ matrix.docker }}
      - name: Test (Python)
        if: ${{ matrix.part == 'Python' }}
        run: ./test-script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_IMAGE: ${{ matrix.docker }}
      - name: Upload coverage
        if: ${{ matrix.part == 'Python' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.host || 'docker' }}-${{ matrix.docker || 'host' }}-${{ matrix.arch || 'default' }}
          path: .coverage*
          include-hidden-files: true
          if-no-files-found: error

  coverage:
    needs:
      - lint
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./install-dev --no-lint --no-haskell
      - name: Download coverage
        uses: actions/download-artifact@v5
        with:
          pattern: 'coverage-data-*'
          merge-multiple: true
      - name: Coverage report
        run: ./coverage-report
      - name: Upload coverage report
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs:
      - test
      - coverage
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./install-dev --no-lint --no-haskell
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          npx \
            --package semantic-release-pypi@3 \
            --package semantic-release@18 \
            semantic-release
