name: CI
on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install dependencies
        run: ./bin/install-dev --no-python
      - name: Lint
        run: ./bin/lint --no-python
  lint-python:
    name: "Lint Python${{ format(' ({0})', matrix.python) || '' }}"
    strategy:
      fail-fast: false
      matrix:
        python:
          - "3.11"
          - "3.13"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: ./bin/install-dev --no-haskell
      - name: Lint
        run: ./bin/lint --no-haskell
  test:
    name: "Test${{ matrix.part && matrix.part != 'Haskell' && format(' {0}', matrix.part) || ''}} (${{ matrix.docker && format('{0} Docker', matrix.docker) || format('{0} host', matrix.host) }}${{ matrix.arch && format(' {0}', matrix.arch) || ''}})"
    strategy:
      fail-fast: false
      matrix: &test-matrix
        include:
          - docker: debian
          - docker: ubuntu
          - docker: ubuntu
            arch: arm
          - docker: fedora
          - host: ubuntu
          - host: macos
    runs-on: &test-runs-on ${{ matrix.host && format('{0}-latest', matrix.host) || matrix.arch && format('ubuntu-24.04-{0}', matrix.arch) || 'ubuntu-latest' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-python
      - name: Configure host system
        if: matrix.host && matrix.host != 'macos'
        run: &configure-host-system |
          sudo tee /etc/polkit-1/rules.d/org.freedesktop.Flatpak.rules >/dev/null <<EOF
            polkit.addRule(function(action, subject) {
              if (
                action.id == "org.freedesktop.Flatpak.app-install" ||
                action.id == "org.freedesktop.Flatpak.modify-repo"
              ) {
                return polkit.Result.YES;
              }
              return polkit.Result.NOT_HANDLED;
            });
          EOF
          command -v apt >/dev/null && sudo apt update || true
      - id: test
        name: Test
        uses: freckle/stack-action@v5
        with:
          cache-prefix: test
          stack-build-arguments: --fast --lock-file error-on-write --coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_IMAGE: ${{ matrix.docker }}
      - name: Rename coverage
        run: cp ${{ steps.test.outputs.local-hpc-root }}/mybox/tests/tests.tix ${{ strategy.job-index }}.tix
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ strategy.job-index }}
          path: '*.tix'

  test-python:
    name: "Test Python (${{ matrix.docker && format('{0} Docker', matrix.docker) || format('{0} host', matrix.host) }}${{ matrix.arch && format(' {0}', matrix.arch) || ''}})"
    strategy:
      fail-fast: false
      matrix: *test-matrix
    runs-on: *test-runs-on
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-haskell
      - name: Configure host system
        if: matrix.host && matrix.host != 'macos'
        run: *configure-host-system
      - name: Test
        run: |
          ./bin/test
          ./bin/coverage-report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_IMAGE: ${{ matrix.docker }}
      - name: Rename coverage
        run: mv coverage.xml coverage${{ strategy.job-index }}.xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-python-${{ strategy.job-index }}
          path: '*.xml'

  coverage:
    name: Coverage
    needs:
      - test
      - test-python
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-python
      - id: compile
        name: Compile
        uses: freckle/stack-action@v5
        with:
          # Run the suite to generate coverage skeleton, but no tests
          stack-build-arguments: --fast --lock-file error-on-write --coverage --ta "--match XXXXX"
          cache-prefix: coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download
        uses: actions/download-artifact@v5
        with:
          pattern: 'coverage-*'
          merge-multiple: true
      - name: Merge
        run: bin/merge-coverage *.tix > ${{ steps.compile.outputs.local-hpc-root }}/combined/all/all.tix
      - name: Convert
        uses: 8c6794b6/hpc-codecov-action@v4
        with:
          target: stack:all
      - name: Upload
        uses: codecov/codecov-action@v5
        with:
          files: codecov.json,coverage*.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs:
      - lint
      - test
      - coverage
    if: ${{ github.ref == 'refs/heads/main' }}
    strategy:
      matrix:
        include:
          - os: ubuntu
          - os: ubuntu
            arch: arm
          - os: macos
    runs-on: ${{ matrix.arch && format('ubuntu-24.04-{0}', matrix.arch) || format('{0}-latest', matrix.os) }}
    name: "Build (${{ matrix.os }}${{ matrix.arch && format(' {0}', matrix.arch) || '' }})"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-python
      - id: compile
        name: Compile
        uses: freckle/stack-action@v5
        with:
          cache-prefix: build
          test: false
      - name: Move executable
        run: cp ${{ steps.compile.outputs.local-install-root }}/bin/mybox ./mybox-$(uname)-$(uname -m)
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}-${{ matrix.arch || 'default' }}
          path: mybox-*

  publish:
    needs:
      - build
      - lint-python
      - test-python
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: ./bin/install-dev --no-lint --no-haskell
      - name: Download executables
        uses: actions/download-artifact@v5
        with:
          pattern: 'executable-*'
          merge-multiple: true
          path: ./executables
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          npx \
            --package semantic-release-pypi@5 \
            --package semantic-release@24 \
            semantic-release
